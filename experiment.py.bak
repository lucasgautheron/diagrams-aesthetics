import random

from markupsafe import Markup

import psynet.experiment
from psynet.bot import Bot
from psynet.modular_page import ModularPage, PushButtonControl, ImagePrompt, Prompt
from psynet.timeline import Module, Timeline, for_loop, while_loop
from psynet.trial import Node, Trial
from psynet.trial.static import StaticNode, StaticTrialMaker, StaticTrial
from psynet.page import InfoPage

from psynet.asset import asset, CachedAsset, AssetNode

from os import listdir
from os.path import basename

import pandas as pd
import numpy as np


def build_aesthetic_nodes():
    triplets_location = "/Users/lucasgautheron/Documents/cs/tasks/clip"

    images = [
        f"{triplets_location}/{f}"
        for f in listdir(triplets_location)
        if f.endswith(".png")
    ]

    nodes = [
        StaticNode(
            definition={"id": basename(image)},
            assets={"stimulus": CachedAsset(image)},
        )
        for image in images
    ]

    return nodes


def build_expertise_nodes():
    triplets_location = "/Users/lucasgautheron/Documents/cs/tasks/expertise/"
    metadata = pd.read_csv(
        "/Users/lucasgautheron/Documents/cs/tasks/expertise.csv", index_col="image"
    )

    images = [
        f"{triplets_location}/{f}"
        for f in listdir(triplets_location)
        if f.endswith(".png")
    ]

    nodes = [
        StaticNode(
            definition={
                "id": basename(image),
                "title": metadata.loc[basename(image), "true_title"],
            },
            assets={"stimulus": CachedAsset(image)},
        )
        for image in images
    ]

    return nodes


aesthetic_nodes = build_aesthetic_nodes()
expertise_nodes = build_expertise_nodes()


def sample_target_nodes(input_nodes, n=100, redundant=50, max_ratings=5):
    nodes = [node for node in input_nodes if len(node.viable_trials) < max_ratings]
    unseen_nodes = [node for node in nodes if len(node.viable_trials) == 0]
    seen_nodes = [node for node in nodes if len(node.viable_trials) > 0]

    if len(seen_nodes) > 0:
        print("sampling seen nodes")
        sample = list(
            np.random.choice(
                seen_nodes, size=np.minimum(redundant, len(seen_nodes)), replace=False
            )
        )
    else:
        sample = []

    if len(unseen_nodes) > 0:
        print("sampling unseen nodes")
        sample += list(
            np.random.choice(
                unseen_nodes,
                size=np.minimum(n - len(sample), len(unseen_nodes)),
                replace=False,
            )
        )

    if len(sample) < n:
        print("re-sample to obtain enough nodes")
        remaining_nodes = set(seen_nodes) + set(unseen_nodes) - set(sample)
        sample += np.random.choice(
            remaining_nodes,
            size=np.minimum(n - len(sample), len(remaining_nodes)),
            replace=False,
        )

    random.shuffle(sample)

    return sample


class ExpertiseTrial(StaticTrial):
    time_estimate = 3

    def show_trial(self, experiment, participant):
        true_title = self.definition["title"]
        asset = self.assets["stimulus"]

        return ModularPage(
            "classify_image_id",
            ImagePrompt(
                asset,
                f"Can you guess which diagram comes from the article entitled '{true_title}'",
                width=900,
                height=300,
            ),
            PushButtonControl(
                choices=[0, 1, 2],
                labels=["Left diagram", "Middle diagram", "Right diagram"],
                arrange_vertically=False,
            ),
        )


class RateTrial(StaticTrial):
    time_estimate = 3

    def show_trial(self, experiment, participant):
        asset = self.assets["stimulus"]

        return ModularPage(
            "rate_image_id",
            ImagePrompt(
                asset,
                "Which diagram is the prettiest among the three, in your opinion?",
                width=900,
                height=300,
            ),
            PushButtonControl(
                choices=[0, 1, 2],
                labels=["Left diagram", "Middle diagram", "Right diagram"],
                arrange_vertically=False,
            ),
        )


# expertise_diagram = StaticTrialMaker(
#     id_="expertise_diagram",
#     trial_class=ExpertiseTrial,
#     nodes=random.sample(expertise_nodes, 3),
#     expected_trials_per_participant=3,
#     target_n_participants=1,
#     recruit_mode="n_participants",
# )

expertise_loop = Module(
    "expertise_module",
    for_loop(
        label="expertise_loop",
        iterate_over=lambda nodes: random.sample(nodes, 3),
        logic=lambda node: ExpertiseTrial.cue(node),
        expected_repetitions=1,
        time_estimate_per_iteration=1,
    ),
    nodes=expertise_nodes,
)

# static_diagram = StaticTrialMaker(
#     id_="static_diagram",
#     trial_class=RateTrial,
#     nodes=sample_target_nodes(aesthetic_nodes, 3, 5, 1),
#     expected_trials_per_participant=3,
#     target_n_participants=1,
#     recruit_mode="n_participants",
#     # target_trials_per_node=1,
# )

aesthetic_loop = Module(
    "aesthetic_module",
    for_loop(
        label="aesthetic_loop",
        iterate_over=lambda nodes: sample_target_nodes(nodes, 100, 10, 5),
        logic=lambda node: RateTrial.cue(node),
        expected_repetitions=1,
        time_estimate_per_iteration=1,
    ),
    nodes=aesthetic_nodes,
)

# module
demographics = ModularPage(
    "demographics",
    Prompt("Which of these best describes you?"),
    control=PushButtonControl(
        [
            "I am a computer scientist",
            "I am a scientist, but in another STEM field",
            "I am not a scientist",
        ]
    ),
    time_estimate=3,
)


class Exp(psynet.experiment.Experiment):
    label = "Pretty diagrams"
    initial_recruitment_size = 1

    timeline = Timeline(
        demographics,
        InfoPage(
            Markup(
                "Before we begin, let us try to assess your familiarity with scientific domain in question."
            ),
            time_estimate=1,
        ),
        expertise_loop,
        InfoPage(
            Markup("We can now start the aesthetic assessment task!"), time_estimate=1
        ),
        aesthetic_loop,
    )

    test_n_bots = 3

    def test_check_bot(self, bot: Bot, **kwargs):
        assert not bot.failed
        trials = bot.all_trials
        assert len(trials) == 3
        assert len(set([t.definition["id"] for t in trials])) == 100
        # assert all([t.definition["id"] in images for t in trials])
        assert all([t.complete for t in trials])
        assert all([t.finalized for t in trials])
